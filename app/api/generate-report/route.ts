import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    const { alert } = await request.json()

    // Simulate report generation time
    await new Promise((resolve) => setTimeout(resolve, 1500))

    // Generate a focused alert investigation report
    const reportContent = `
SECURITY ALERT INVESTIGATION REPORT
===================================

ALERT OVERVIEW
==============
Alert ID: ${alert.alert_id}
Signature ID: ${alert.signature_id || "N/A"}
Attack Type: ${alert.signature_name}
Severity Level: ${alert.severity}
Detection Time: ${new Date(alert.timestamp).toLocaleString()}
Report Generated: ${new Date().toLocaleString()}

NETWORK DETAILS
===============
Source IP Address: ${alert.src_ip}
Source Port: ${alert.src_port}
Destination IP: ${alert.dst_ip}
Destination Port: ${alert.dst_port}
Protocol: ${alert.protocol}

PAYLOAD ANALYSIS
================
${
  alert.payload_snippet
    ? `Captured Payload:
${alert.payload_snippet}

Payload Length: ${alert.payload_snippet.length} characters
Encoding: UTF-8`
    : "No payload data captured"
}

THREAT INTELLIGENCE
===================
Risk Assessment: ${alert.severity}
Attack Classification: ${alert.signature_name}
Threat Level: ${getSeverityDescription(alert.severity)}

Recommended Response:
${getRecommendedActions(alert.severity)}

TECHNICAL ANALYSIS
==================
Detection Method: Signature-based detection
Confidence Level: High
False Positive Probability: Low

Network Flow:
${alert.src_ip}:${alert.src_port} → ${alert.dst_ip}:${alert.dst_port} (${alert.protocol})

INVESTIGATION SUMMARY
=====================
This security alert was automatically generated by the Network IDS system
based on signature matching and behavioral analysis. The detected activity
matches known attack patterns for ${alert.signature_name}.

${
  alert.severity === "Critical"
    ? `⚠️  CRITICAL ALERT: This incident requires immediate attention and response.
Recommend immediate isolation of affected systems and forensic analysis.`
    : alert.severity === "High"
      ? `⚠️  HIGH PRIORITY: This incident should be investigated promptly.
Consider blocking the source IP and reviewing related network activity.`
      : `ℹ️  MEDIUM/LOW PRIORITY: Monitor for additional related activity.
Log incident for trend analysis and pattern recognition.`
}

NEXT STEPS
==========
□ Review network logs for related activity
□ Check for additional alerts from same source
□ Verify legitimacy of network traffic
□ ${alert.severity === "Critical" || alert.severity === "High" ? "Block source IP address" : "Continue monitoring"}
□ Update security policies if necessary
□ Document incident response actions

---
Report ID: RPT-${alert.alert_id}-${Date.now()}
Generated by: Network IDS v2.1
Contact: security@company.com
    `

    // Create a text file with investigation details
    const blob = new Blob([reportContent], { type: "text/plain" })

    return new Response(blob, {
      headers: {
        "Content-Type": "application/octet-stream",
        "Content-Disposition": `attachment; filename="alert-investigation-${alert.alert_id}.txt"`,
      },
    })
  } catch (error) {
    console.error("Report generation error:", error)
    return NextResponse.json({ error: "Failed to generate report" }, { status: 500 })
  }
}

function getSeverityDescription(severity: string): string {
  switch (severity) {
    case "Critical":
      return "Immediate threat requiring urgent response"
    case "High":
      return "Significant security risk requiring prompt attention"
    case "Medium":
      return "Moderate risk requiring investigation"
    case "Low":
      return "Low risk requiring monitoring"
    default:
      return "Unknown risk level"
  }
}

function getRecommendedActions(severity: string): string {
  switch (severity) {
    case "Critical":
      return `1. Immediately isolate affected systems
2. Initiate incident response procedures
3. Conduct forensic analysis
4. Notify security team and management
5. Block source IP address
6. Review and strengthen security controls`
    case "High":
      return `1. Block source IP address
2. Review firewall and network logs
3. Monitor for additional related activity
4. Update security signatures
5. Notify security team`
    case "Medium":
      return `1. Monitor network activity from source
2. Log incident for trend analysis
3. Review security policies
4. Consider rate limiting if applicable`
    case "Low":
      return `1. Continue monitoring
2. Log for statistical analysis
3. Review during routine security assessment`
    default:
      return "Follow standard incident response procedures"
  }
}
